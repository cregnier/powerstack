# ModSecurity 2.x for Apache default configuration file provided by PowerStack, http://powerstack.org
LoadModule security2_module modules/mod_security2.so

<IfModule !mod_unique_id.c>
	LoadModule unique_id_module modules/mod_unique_id.so
</IfModule>

<IfModule mod_security2.c>
	# Turn on/off ModSecurity filtering engine
	SecRuleEngine On

	# Configures whether *request* bodies will be buffered and processed by ModSecurity by default
	SecRequestBodyAccess On

	# Configures whether *response* bodies are to be buffer and analysed or not
	SecResponseBodyAccess Off

	# Load OWASP ModSecurity Core Rule Set (CRS)
	Include modsecurity.d/*.conf
	Include modsecurity.d/activated_rules/*.conf

	# PCRE tuning, set match limits + recursion (see "pcre_extra" field in the pcreapi man page)
	SecPcreMatchLimit 1000
	SecPcreMatchLimitRecursion 1000

	# Do not keep uploaded files after transaction is processed by ModSecurity
	SecUploadKeepFiles Off

	# Configures the maximum number of file uploads processed in a multipart POST
	SecUploadFileLimit 10

	# Audit logging engine configuration
	SecAuditEngine RelevantOnly

	# Configures which response status code is to be considered relevant for the purpose of audit logging
	SecAuditLogRelevantStatus ^5

	# Defines which part of each transaction are going to be recorded in the audit
	# log. Each part is assigned a single letter. If a letter appears in the list
	# then the equivalent part of each transactions will be recorded
	SecAuditLogParts ABIFHZ

	# Configures the type of audit logging mechanism to be used: Serial/Concurrent
	SecAuditLogType Serial

	# Path to the main audit log file
	SecAuditLog /var/log/httpd/modsec_audit.log

	# Specifies which character to use as separator for application/x-www-form-urlencoded content
	SecArgumentSeparator &

	# Selects the cookie format that will be used in the current configuration context
	SecCookieFormat 0

	# Configures the directory where temporary files will be created
	SecTmpDir /var/lib/mod_security

	# Path where persistent data (e.g. IP address data, session data, etc) will be stored
	SecDataDir /var/lib/mod_security

	# Path to the ModSecurity debug log file
	SecDebugLog /var/log/httpd/modsec_debug.log

	# Configures the verboseness of the debug log data
	SecDebugLogLevel 0

	# Maximum request body size (in bytes) we will accept for buffering, default 128K
	SecRequestBodyLimit 10485760

	# Configures the maximum request body size ModSecurity will accept for buffering
	SecRequestBodyNoFilesLimit 131072

	# Configures the maximum request body size ModSecurity will store in memory
	SecRequestBodyInMemoryLimit 131072

	SecRequestBodyLimitAction Reject

	# Configures the maximum response body size that will be accepted for buffering
	SecResponseBodyLimit 524288

	SecRule REQUEST_HEADERS:Content-Type "text/xml" "id:'200000', phase:1, t:none, t:lowercase, pass, nolog, ctl:requestBodyProcessor=XML"

	SecRule MULTIPART_STRICT_ERROR "!@eq 0" "id:'200002', phase:2, t:none, log, deny, status:44, msg:'Multipart request body failed strict validation: \
		PE %{REQBODY_PROCESSOR_ERROR}, \
		BQ %{MULTIPART_BOUNDARY_QUOTED}, \
		BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
		DB %{MULTIPART_DATA_BEFORE}, \
		DA %{MULTIPART_DATA_AFTER}, \
		HF %{MULTIPART_HEADER_FOLDING}, \
		LF %{MULTIPART_LF_LINE}, \
		SM %{MULTIPART_MISSING_SEMICOLON}, \
		IQ %{MULTIPART_INVALID_QUOTING}, \
		IP %{MULTIPART_INVALID_PART}, \
		IH %{MULTIPART_INVALID_HEADER_FOLDING}, \
		FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'"

	SecRule MULTIPART_UNMATCHED_BOUNDARY "!@eq 0" "id:'200003', phase:2, t:none, log, deny, status:44, msg:'Multipart parser detected a possible unmatched boundary'"

	# Some internal errors will set flags in TX and we will need to look for
	# these. All of these are prefixed with "MSC_", the following flags currently
	# exist: MSC_PCRE_LIMITS_EXCEEDED: PCRE match limits were exceeded
	SecRule TX:/^MSC_/ "!@streq 0" "id:'200004', phase:2, t:none, deny, msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'"
</IfModule>
